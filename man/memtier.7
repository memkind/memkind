.\" SPDX-License-Identifier: BSD-2-Clause
.\" Copyright (C) 2021 Intel Corporation.
.\"
.TH "MEMTIER" 7 "2021-03-01" "Intel Corporation" "MEMTIER" \" -*- nroff -*-
.SH "NAME"
libmemtier.so \- TODO

.SH "SYNOPSIS"
In order to enable the usage of tiering in memkind, pass the following environment variable along with the command:
.RS
.B LD_PRELOAD=libmemtier.so
command {arguments ...}
.RE

.SH "DESCRIPTION"
.B TODO

.SH "ENVIRONMENT"
.TP
.B MEMKIND_MEM_TIERS
Sets the memkind tiering functionality. Passed as a semicolon-separated list of
tier configurations ended with a policy parameter. Each tier configuration consists of
a comma-separated list of tier parameters in the following format:
.IP
"param_name:value,(...)"
, where the param_name is the name of the parameter. For more details about param_name
see the TIER PARAMETER NAME section below.
.TP
.B MEMKIND_MEM_THRESHOLDS
Semicolon-separated list of threshold configurations. Each configuration consists of
a comma-separated list of threshold parameters in the same format as
.I MEMKIND_MEM_TIERS
, where the param_name is one of the VAL, MIN and MAX. Each parameter can be set only
once. When one of parameters is missing, it will be set to a default value. Order of
provided configurations is important - configuration of Nth threshold defines threshold
between Nth and (N+1)th tier. If some threshold configuration is missing, threshold with default
configuration will be used. Note that for N tiers there should be at most N-1 thresholds defined. Set this variable only
when
.I DYNAMIC_THRESHOLD
policy will is used. For more details about param_name see the THRESHOLD PARAMETER NAME section below. TODO add detailed example.

.SH "TIER PARAMETER NAME"
.TP
KIND (required) - kind of memory used in memory tier. Allowed kind names are 'DRAM', 'KMEM_DAX' and 'FS_DAX'.
.TP
PATH (required for FS_DAX kind) - the path to the location where pmem file will be created. The path has to exist. Pass this option
only with FS_DAX kind.
.TP
PMEM_SIZE_LIMIT (optional) - if set, it is the limitation size of pmem file and the maximum size of total
allocations to PMEM. By default no limit is introduced. Pass this option only with FS_DAX kind.
The accepted formats are: 1, 1K, 1M, 1G. See
.I memkind(3)
manual for information about limitations to this value which are the same as for the
.I max_size
value in
.I memkind_create_pmem()
function.
.TP
RATIO (required) - the part of ratio tied to the given kind. It's represented as an
.I unsigned
type. Value should be in range from 1 to
.I UINT_MAX
.TP
POLICY (required) - determines the algorithm used to distribute allocations between
provided memory kinds. This parameter has to be the last parameter in
.I MEMKIND_MEM_TIERS
configuration string. Currently only
.I STATIC_THRESHOLD
and
.I DYNAMIC_THRESHOLD
policies are valid. In
.I STATIC_THRESHOLD
all allocations are made in such a way that the ratio between memory kinds is static. In
.I DYNAMIC_THRESHOLD
the ratio between adjacent memory tiers is kept with a help of set of thresholds between kinds. TODO
.PP
See
.I EXAMPLES
section for an example of usage of
.I MEMKIND_MEM_TIERS
environment variable.
.br
NOTE: The application will fail when provided environment variable string is not in a correct format.

.SH "THRESHOLD PARAMETER NAME"
.TP
VAL (optional) - initial value of threshold between two adjacent N and N+1 tiers. For every allocation,
if it's size is greater or equal than VAL, it will go to N+1 tier. It has to be greater or equal to MIN value
and less or equal than MAX value. Note that in DYNAMIC_THRESHOLD policy this value can change in time
to keep desired ratio between tiers.
.TP
MIN (optional) - minimum value of threshold. In DYNAMIC_THRESHOLD policy, threshold value can change in time
to keep desired ratio between tiers, but it will not be lesser than MIN.
.TP
MAX (optional) - maximum value of threshold. In DYNAMIC_THRESHOLD policy, threshold value can change in time
to keep desired ratio between tiers, but it will not be greater than MAX.
.PP
NOTE: Because setting above parameters is optional, they will be set to default values in case they are not defined.
Default values for a threshold between first two tiers is VAL = 1024, MIN = 513 and MAX = 1536.
If there are more tiers defined, each next undefined threshold will have all parameters increased by 1024,
so next undefined threshold between next two tier will have VAL = 2048, MIN = 1537, MAX = 2560 and so on.
.SH "DRAM FALLBACK POLICY"
If there is not enough memory to satisfy the
.I DRAM
tier memory allocation request, with usage of
.I KMEM_DAX
tier, allocation will fall back to PMEM memory.
.PP
If there is not enough memory to satisfy the
.I DRAM
tier memory allocation request, with usage of
.I FS_DAX
tier, allocation will not fall back to PMEM memory.
.SH "EXAMPLES"
.br
The following will run /bin/ls with Memtier library. Make sure that paths to
both libmemtier.so and libmemkind.so are included in
.B LD_LIBRARY_PATH.
.IP
.B LD_PRELOAD=libmemtier.so
/bin/ls -l
.PP
Example usage of MEMKIND_MEM_TIERS environment variable where 20% of allocations will go to PMEM
and 80% of allocations will go to DRAM:
.IP
.B MEMKIND_MEM_TIERS="KIND:FS_DAX,PATH:/tmp/,PMEM_SIZE_LIMIT:10G,RATIO:1;KIND:DRAM,RATIO:4;POLICY:STATIC_THRESHOLD"
.PP
Example usage of MEMKIND_MEM_TIERS environment variable where 100% of allocations will go to PMEM
with filesystem created on top of it:
.IP
.B MEMKIND_MEM_TIERS="KIND:FS_DAX,PATH:/tmp/,RATIO:1;POLICY:STATIC_THRESHOLD"
.PP
Example usage of MEMKIND_MEM_TIERING_CONFIG environment variable where 20% of allocations will go to DRAM
and 80% of allocations will go to DAX KMEM nodes:
.IP
.B MEMKIND_MEM_TIERS="KIND:DRAM,RATIO:1;KIND:KMEM_DAX,RATIO:4,POLICY:STATIC_THRESHOLD"
.B TODO Example with dynamic threshold
.SH "NOTES"
.B libmemtier
works for applications which does not statically link a
.B malloc
implementation.
.SH "COPYRIGHT"
Copyright (C) 2021 Intel Corporation. All rights reserved.
.SH "SEE ALSO"
.BR memkind(3),
.BR malloc (3)
