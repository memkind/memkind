.\" Automatically generated by Pandoc 2.9.2.1
.\"
.TH "HBWMALLOC" "3" "2022-10-07" "HBWMALLOC | MEMKIND Programmer's Manual"
.hy
.\" SPDX-License-Identifier: BSD-2-Clause
.\" Copyright "2014-2022", Intel Corporation
.SH NAME
.PP
\f[B]hbwmalloc\f[R] - The high bandwidth memory interface.
.PP
\f[B]Note:\f[R] \f[I]hbwmalloc.h\f[R] functionality is considered as a
stable API (STANDARD API).
.SH SYNOPSIS
.IP
.nf
\f[C]
#include <hbwmalloc.h>

Link with -lmemkind

int hbw_check_available(void);
void* hbw_malloc(size_t size);
void* hbw_calloc(size_t nmemb, size_t size);
void* hbw_realloc (void *ptr, size_t size);
void hbw_free(void *ptr);
size_t hbw_malloc_usable_size(void *ptr);
int hbw_posix_memalign(void **memptr, size_t alignment, size_t size);
int hbw_posix_memalign_psize(void **memptr, size_t alignment, size_t size, hbw_pagesize_t pagesize);
hbw_policy_t hbw_get_policy(void);
int hbw_set_policy(hbw_policy_t mode);
int hbw_verify_memory_region(void *addr, size_t size, int flags);
\f[R]
.fi
.SH DESCRIPTION
.TP
\f[B]\f[CB]hbw_check_available()\f[B]\f[R]
returns zero if high bandwidth memory is available or an error code
described in the ERRORS section if not.
.TP
\f[B]\f[CB]hbw_malloc()\f[B]\f[R]
allocates \f[I]size\f[R] bytes of uninitialized high bandwidth memory.
The allocated space is suitably aligned (after possible pointer
coercion) for storage of any type of object.
If \f[I]size\f[R] is zero, then \f[C]hbw_malloc()\f[R] returns either
NULL or a valid ptr, depending on the system\[cq]s standard library
malloc(0) behavior.
.TP
\f[B]\f[CB]hbw_calloc()\f[B]\f[R]
allocates space for \f[I]nmemb\f[R] objects in high bandwidth memory,
each \f[I]size\f[R] bytes in length.
The result is identical to calling \f[C]hbw_malloc()\f[R] with an
argument of \f[I]nmemb\f[R] * \f[I]size\f[R], with the exception that
the allocated memory is explicitly initialized to zero bytes.
If \f[I]nmemb\f[R] or \f[I]size\f[R] is zero, then
\f[C]hbw_calloc()\f[R] returns either NULL or a valid ptr, depending on
the system\[cq]s standard library malloc(0) behavior.
.TP
\f[B]\f[CB]hbw_realloc()\f[B]\f[R]
changes the size of the previously allocated high bandwidth memory
referenced by \f[I]ptr\f[R] to \f[I]size\f[R] bytes.
The contents of the memory remain unchanged up to the lesser of the new
and old sizes.
If the new size is larger, the contents of the newly allocated portion
of the memory are undefined.
Upon success, the memory referenced by \f[I]ptr\f[R] is freed and a
pointer to the newly allocated high bandwidth memory is returned.
\f[B]Note:\f[R] \f[C]hbw_realloc()\f[R] may move the memory allocation,
resulting in a different return value than \f[I]ptr\f[R].
.PD 0
.P
.PD
If \f[I]ptr\f[R] is NULL, the \f[C]hbw_realloc()\f[R] function behaves
identically to \f[C]hbw_malloc()\f[R] for the specified size.
If \f[I]size\f[R] is equal to zero and \f[I]ptr\f[R] is not NULL, then
the call is equivalent to \f[C]hbw_free(ptr)\f[R] and NULL is returned.
The address \f[I]ptr\f[R], if not NULL, was returned by a previous call
to \f[C]hbw_malloc()\f[R], \f[C]hbw_calloc()\f[R],
\f[C]hbw_realloc()\f[R] or \f[C]hbw_posix_memalign()\f[R].
Otherwise, or if \f[C]hbw_free(ptr)\f[R] was called before, undefined
behavior occurs.
\f[B]Note:\f[R] \f[C]hbw_realloc()\f[R] cannot be used with a pointer
returned by \f[C]hbw_posix_memalign_psize()\f[R].
.TP
\f[B]\f[CB]hbw_free()\f[B]\f[R]
causes the allocated memory referenced by \f[I]ptr\f[R] to be made
available for future allocations.
If \f[I]ptr\f[R] is NULL, no action occurs.
In other case the address \f[I]ptr\f[R], if not NULL, must have been
returned by a previous call to \f[C]hbw_malloc()\f[R],
\f[C]hbw_calloc()\f[R], \f[C]hbw_realloc()\f[R],
\f[C]hbw_posix_memalign()\f[R] or \f[C]hbw_posix_memalign_psize()\f[R].
Otherwise, if \f[C]hbw_free(ptr)\f[R] was called before, undefined
behavior occurs.
.TP
\f[B]\f[CB]hbw_malloc_usable_size()\f[B]\f[R]
returns the number of usable bytes in the block pointed to by
\f[I]ptr\f[R], a pointer to a block of memory allocated by
\f[C]hbw_malloc()\f[R], \f[C]hbw_calloc()\f[R], \f[C]hbw_realloc()\f[R],
\f[C]hbw_posix_memalign()\f[R], or \f[C]hbw_posix_memalign_psize()\f[R].
.TP
\f[B]\f[CB]hbw_posix_memalign()\f[B]\f[R]
allocates \f[I]size\f[R] bytes of high bandwidth memory such that the
allocation\[cq]s base address is an even multiple of
\f[I]alignment\f[R], and returns the allocation in the value pointed to
by \f[I]memptr\f[R].
The requested alignment must be a power of 2 at least as large as
\f[I]sizeof(void)\f[R].
If \f[I]size\f[R] is 0, then \f[C]hbw_posix_memalign()\f[R] returns 0,
with a NULL returned in \f[I]memptr\f[R].
See the \f[B]ERRORS\f[R] section for other possible return values.
.TP
\f[B]\f[CB]hbw_posix_memalign_psize()\f[B]\f[R]
allocates \f[I]size\f[R] bytes of high bandwidth memory such that the
allocation\[cq]s base address is an even multiple of
\f[I]alignment\f[R], and returns the allocation in the value pointed to
by \f[I]memptr\f[R].
The requested \f[I]alignment\f[R] must be a power of 2 at least as large
as \f[I]sizeof(void)\f[R].
The memory will be allocated using pages determined by the
\f[I]pagesize\f[R] variable which may be one of the following enumerated
values:
.IP \[bu] 2
\f[B]HBW_PAGESIZE_4KB\f[R]
.PD 0
.P
.PD
The four kilobyte page size option.
Note that with transparent huge pages enabled these allocations may be
promoted by the operating system to two megabyte pages.
.IP \[bu] 2
\f[B]HBW_PAGESIZE_2MB\f[R]
.PD 0
.P
.PD
The two megabyte page size option.
\f[B]Note:\f[R] This page size requires huge pages configuration
described in the SYSTEM CONFIGURATION section.
.PP
\f[B]Note:\f[R] \f[B]HBW_PAGESIZE_2MB\f[R], option is not supported with
the \f[B]HBW_POLICY_INTERLEAVE\f[R] policy which is described below.
.TP
\f[B]\f[CB]hbw_set_policy()\f[B]\f[R]
sets the current fallback policy.
The policy can be modified only once in the lifetime of an application
and before calling any of: \f[C]hbw_malloc()\f[R],
\f[C]hbw_calloc()\f[R], \f[C]hbw_realloc()\f[R],
\f[C]hbw_posix_memalign()\f[R], or \f[C]hbw_posix_memalign_psize()\f[R]
functions.
\f[B]Note:\f[R] If the policy is not set, then
\f[B]HBW_POLICY_PREFERRED\f[R] will be used by default.
.IP \[bu] 2
\f[B]HBW_POLICY_BIND\f[R]
.PD 0
.P
.PD
If insufficient high bandwidth memory from the nearest NUMA node is
available to satisfy a request, the allocated pointer is set to NULL and
\f[I]errno\f[R] is set to \f[B]ENOMEM\f[R].
If insufficient high bandwidth memory pages are available at the fault
time the \f[I]Out Of Memory (OOM) Killer\f[R] is triggered.
Note that pages are faulted exclusively from the high bandwidth NUMA
node nearest at the time of allocation, not at the time of fault.
.IP \[bu] 2
\f[B]HBW_POLICY_BIND_ALL\f[R]
.PD 0
.P
.PD
If insufficient high bandwidth memory is available to satisfy a request,
the allocated pointer is set to NULL and \f[I]errno\f[R] is set to
\f[B]ENOMEM\f[R].
If insufficient high bandwidth memory pages are available at the fault
time the \f[I]Out Of Memory (OOM) Killer\f[R] is triggered.
Note that pages are faulted from the high bandwidth NUMA nodes.
Nearest NUMA node is selected at the time of the page fault.
.IP \[bu] 2
\f[B]HBW_POLICY_PREFERRED\f[R]
.PD 0
.P
.PD
If insufficient memory is available from the high bandwidth NUMA node
closest at the allocation time, fall back to standard memory (default)
with the smallest NUMA distance.
.IP \[bu] 2
\f[B]HBW_POLICY_INTERLEAVE\f[R]
.PD 0
.P
.PD
Interleave faulted pages from across all high bandwidth NUMA nodes using
standard size pages (the Transparent Huge Page feature is disabled).
.TP
\f[B]\f[CB]hbw_get_policy()\f[B]\f[R]
returns the current fallback policy when insufficient high bandwidth
memory is available.
.TP
\f[B]\f[CB]hbw_verify_memory_region()\f[B]\f[R]
verifies if a memory region fully falls into high bandwidth memory.
Returns 0 if memory address range from \f[I]addr\f[R] to \f[I]addr
+\f[R] \f[I]size\f[R] is allocated in high bandwidth memory, -1 if any
fragment of memory was not backed by high bandwidth memory (e.g.\ when
memory is not initialized) or one of error codes described in the ERRORS
section.
\f[B]Notes:\f[R] Using this function in production code may result in a
serious performance penalty.
\f[B]The \f[BI]flags\f[B] argument may includeoptional flags that modify
function behavior:\f[R]
.IP \[bu] 2
\f[B]HBW_TOUCH_PAGES\f[R]
.PD 0
.P
.PD
Before checking pages, function will touch the first byte of all pages
in the address range starting from \f[I]addr\f[R] to \f[I]addr +\f[R]
\f[I]size\f[R] by reading and writing (so the content will be
overwritten by the same data as has been read).
Using this option may trigger the \f[I]Out Of Memory Killer\f[R].
.SH RETURN VALUE
.PP
\f[C]hbw_get_policy()\f[R] returns \f[B]HBW_POLICY_BIND\f[R],
\f[B]HBW_POLICY_BIND_ALL\f[R], \f[B]HBW_POLICY_PREFERRED\f[R] or
\f[B]HBW_POLICY_INTERLEAVE\f[R] which represents the current high
bandwidth policy.
\f[C]hbw_free()\f[R] do not have a return value.
\f[C]hbw_malloc()\f[R], \f[C]hbw_calloc()\f[R] and
\f[C]hbw_realloc()\f[R] return the pointer to the allocated memory or
NULL if the request fails.
\f[C]hbw_posix_memalign()\f[R], \f[C]hbw_posix_memalign_psize()\f[R] and
\f[C]hbw_set_policy()\f[R] return zero on success and return an error
code as described in the ERRORS section below on failure.
.SH ERRORS
.PP
Error codes described here are the POSIX standard error codes as defined
in <\f[I]errno.h\f[R]>
.TP
\f[B]\f[CB]hbw_check_available()\f[B]\f[R]
returns \f[B]ENODEV\f[R] if high bandwidth memory is unavailable.
.PP
\f[B]\f[CB]hbw_posix_memalign()\f[B]\f[R] and
\f[B]\f[CB]hbw_posix_memalign_psize()\f[B]\f[R]
.PD 0
.P
.PD
If the \f[I]alignment\f[R] parameter is not a power of two, or was not a
multiple of \f[I]sizeof(void\f[R])*, then \f[B]EINVAL\f[R] is returned.
If the policy and pagesize combination is unsupported then
\f[B]EINVAL\f[R] is returned.
If there was insufficient memory to satisfy the request then
\f[B]ENOMEM\f[R] is returned.
.TP
\f[B]\f[CB]hbw_set_policy()\f[B]\f[R]
returns \f[B]EPERM\f[R] if hbw_set_policy() was called more than once,
or \f[B]EINVAL\f[R] if mode argument was neither
\f[B]HBW_POLICY_PREFERRED\f[R], \f[B]HBW_POLICY_BIND\f[R],
\f[B]HBW_POLICY_BIND_ALL\f[R] nor \f[B]HBW_POLICY_INTERLEAVE\f[R].
.TP
\f[B]\f[CB]hbw_verify_memory_region()\f[B]\f[R]
returns \f[B]EINVAL\f[R] if \f[I]addr\f[R] is NULL, \f[I]size\f[R]
equals 0 or flags contained an unsupported bit set.
If memory pointed by \f[I]addr\f[R] could not be verified then
\f[B]EFAULT\f[R] is returned.
.SH NOTES
.PP
The <\f[I]hbwmalloc.h\f[R]> file defines the external functions and
enumerations for the hbwmalloc library.
These interfaces define a heap manager that targets high bandwidth
memory numa nodes.
.SH UTILS
.TP
\f[I]/usr/bin/memkind-hbw-nodes\f[R]
Prints a comma-separated list of high bandwidth nodes.
.SH ENVIRONMENT
.TP
MEMKIND_HBW_NODES
This environment variable is a comma-separated list of NUMA nodes that
are treated as high bandwidth.
Uses the \f[I]libnuma\f[R] routine \f[C]numa_parse_nodestring()\f[R] for
parsing, so the syntax described in the \f[C]numa(3)\f[R] man page for
this routine applies, for example: \f[I]1-3,5\f[R] is a valid setting.
.TP
MEMKIND_ARENA_NUM_PER_KIND
This environment variable allows leveraging internal mechanism of the
library for setting number of arenas per kind.
Value should be a positive integer (not greater than \f[B]INT_MAX\f[R]
defined in <\f[I]limits.h\f[R]>).
The user should set the value based on the characteristics of the
application that is using the library.
Higher value can provide better performance in extremely multithreaded
applications at the cost of memory overhead.
See section \f[B]IMPLEMENTATION NOTES\f[R] of \f[B]jemalloc\f[R](3) for
more details about arenas.
.TP
MEMKIND_HEAP_MANAGER
Controls heap management behavior in the memkind library by switching to
one of the available heap managers.
.PD 0
.P
.PD
Possible values are:
.IP \[bu] 2
JEMALLOC - sets the \f[I]jemalloc\f[R] heap manager
.IP \[bu] 2
TBB - sets the \f[I]Intel Threading Building Blocks\f[R] heap manager.
This option requires installed \f[I]Intel Threading Building Blocks\f[R]
library.
.PP
\f[B]Note:\f[R] If the \f[B]MEMKIND_HEAP_MANAGER\f[R] is not set then
the \f[I]jemalloc\f[R] heap manager will be used by default.
.SH SYSTEM CONFIGURATION
.TP
HUGETLB (huge pages)
Current number of \[lq]persistent\[rq] huge pages can be read from the
\f[I]/proc/sys/vm/nr_hugepages\f[R] file.
The proposed way of setting hugepages is:
\f[C]sudo sysctl vm.nr_hugepages=<number_of_hugepages>\f[R].
More information can be found here:
https://www.kernel.org/doc/Documentation/vm/hugetlbpage.txt
.PP
Interfaces for obtaining 2MB (\f[I]HUGETLB\f[R]) memory need allocated
huge pages in the kernel\[cq]s huge page pool.
.SH KNOWN ISSUES
.TP
HUGETLB (huge pages)
There might be some overhead in huge pages consumption caused by heap
management.
If your allocation fails because of the OOM, please try to allocate
extra huge pages (e.g.\ 8 huge pages).
.SH COPYRIGHT
.PP
Copyright (C) 2014 - 2022 Intel Corporation.
All rights reserved.
.SH SEE ALSO
.PP
\f[B]malloc\f[R](3), \f[B]numa\f[R](3), \f[B]jemalloc\f[R](3),
\f[B]memkind\f[R](3)
