.\" Automatically generated by Pandoc 2.5
.\"
.TH "LIBMEMTIER" "7" "2022-08-10" "LIBMEMTIER ver. 1.14.0+dev6+gcd4375cb" "LIBMEMTIER | MEMKIND Programmer's Manual"
.hy
.\" SPDX-License-Identifier: BSD-2-Clause
.\" Copyright 2022, Intel Corporation
.SH NAME
.PP
\f[B]libmemtier.so\f[R] \- interposer library which enables the memkind
memory tiering.
.SH SYNOPSIS
.PP
In order to use the memkind memory tiering with pre\-built binaries,
pass the following environment variables along with the command:
.IP
.nf
\f[C]
LD_PRELOAD=libmemtier.so MEMKIND_MEM_TIERS=\[dq]...\[dq] command {arguments ...}
\f[R]
.fi
.SH DESCRIPTION
.PP
This library enables the memkind memory tiering mechanism.
With this funcionality, allocations will be split between different
types of memory automatically.
The library allows making allocations with the usage of multiple kinds
keeping a specified ratio between them.
This ratio determines how much of the total allocated memory should be
allocated with each kind.
Both \f[B]LD_PRELOAD\f[R] and \f[B]MEMKIND_MEM_TIERS\f[R] environment
variables are mandatory for enabling the memkind memory tiering.
.SS ENVIRONMENT
.TP
.B MEMKIND_MEM_TIERS
A semicolon\-separated list of tier configurations ended with a policy
parameter.
Each of the tier configurations is a comma\-separated list of tier
parameters in the format: \f[B]param_name:value,(\&...)\f[R] For the
list of available tier parameters, please see the \f[B]TIER
PARAMETERS\f[R] section below.
.TP
.B MEMKIND_MEM_THRESHOLDS
Semicolon\-separated list of threshold configurations.
Each configuration consists of a comma\-separated list of threshold
parameters in the same format as \f[B]MEMKIND_MEM_TIERS\f[R], where the
\f[B]param_name\f[R] is one of the \f[I]INIT_VAL\f[R], \f[I]MIN_VAL and
MAX_VAL\f[R].
Each parameter can be set only once.
When any of the parameters are missing, they will be set to a default
value.
If threshold configuration is missing, threshold with default
configuration will be used.
If any of the parameters is set more than once, the application will be
aborted.
Order of provided configurations is important \- configuration of Nth
threshold defines threshold between Nth and (N+1)th tier.
Note that for N+1 tiers there should be at most N thresholds defined.
Set this variable only when \f[B]DYNAMIC_THRESHOLD\f[R] policy is used.
For more details about \f[B]param_name\f[R] see the \f[B]THRESHOLD
PARAMETERS\f[R] section below.
See also \f[B]EXAMPLES\f[R] section for the usage of
\f[B]MEMKIND_MEM_THRESHOLDS\f[R] environment variable.
.SS TIER PARAMETERS
.TP
.B KIND
(required) \- kind of memory used in memory tier.
Allowed kind names are \f[I]\[cq]DRAM\[cq]\f[R],
\f[I]\[cq]KMEM_DAX\[cq]\f[R] and \f[I]\[cq]FS_DAX\[cq]\f[R].
There can be multiple different kind names provided in the
\f[B]MEMKIND_MEM_TIERS\f[R] environment variable \- one in each tier
configuration.
Additionally, in this variable more than one \f[I]\[cq]FS_DAX\[cq]\f[R]
kind name is allowed.
More information about available kinds can be found in the
\f[B]memkind\f[R](3) manual, where the \f[I]\[cq]DRAM\[cq]\f[R] kind
name allocates memory with the usage of the \f[B]MEMKIND_DEFAULT\f[R]
kind, the \f[I]\[cq]KMEM_DAX\[cq]\f[R] with the
\f[B]MEMKIND_DAX_KMEM\f[R] kind and the \f[I]\[cq]FS_DAX\[cq]\f[R] with
a file\-backed kind of memory created with the
\f[C]memkind_create_pmem()\f[R] function.
.TP
.B PATH
(required only for the \f[I]FS_DAX\f[R] kind) \- the path to the
location where pmem file will be created.
The path has to exist.
For other kinds, if set, will cause an error.
.TP
.B PMEM_SIZE_LIMIT
(optional, only for the \f[I]FS_DAX\f[R] kind) \- if set, it limits the
size of pmem file and the maximum size of total allocations from
persistent memory.
By default, no limit is introduced.
Pass this option only with FS_DAX kind.
For other kinds, if set, will cause an error.
The accepted formats are: 1, 1K, 1M, 1G.
See the \f[B]memkind\f[R](3) manual for information about limitations to
this value which are the same as for the \f[B]max_size\f[R] value of the
\f[C]memkind_create_pmem()\f[R] function.
.TP
.B POLICY
(required, only one in the whole environment variable) \- determines the
algorithm used to distribute allocations between provided memory kinds.
This parameter has to be the last parameter in
\f[B]MEMKIND_MEM_TIERS\f[R] configuration string.
Currently only \f[I]STATIC_RATIO\f[R] and \f[I]DYNAMIC_THRESHOLD\f[R]
policies are valid.
See the \f[B]POLICIES\f[R] section.
.TP
.B RATIO
(required) \- the part of the ratio tied to the given kind.
It\[cq]s an \f[I]unsigned\f[R] type in a range from 1 to
\f[I]UINT_MAX\f[R].
See \f[B]EXAMPLES\f[R] section.
.PP
\f[B]NOTE:\f[R] The application will fail when provided environment
variable string is not in the correct format.
.SS POLICIES
.TP
.B STATIC_RATIO
All allocations are made in such a way that the ratio between memory
tiers is constant.
No threshold is used.
.TP
.B DYNAMIC_THRESHOLD
The ratio between memory tiers is kept with a help of a threshold
between kinds which value changes in time.
Minimum two tiers are required for this policy, otherwise the
application will be aborted.
The threshold value can change in time to keep the desired ratio between
tiers, but it will not be lesser than MIN_VAL and it will not be greater
than MAX_VAL.
For every allocation, if its size is greater than or equal to INIT_VAL,
it will come from the (N+1)th tier.
.PP
Default values for a threshold between first two tiers in the
MEMKIND_MEM_TIERS environment variable are:
.IP \[bu] 2
\f[C]INIT_VAL = 1024, MIN_VAL = 513, MAX_VAL = 1536.\f[R]
.PP
If there are more tiers defined, each next undefined threshold will have
all parameters increased by 1024, so the next undefined threshold
between the next two tiers will have:
.IP \[bu] 2
\f[C]INIT_VAL = 2048, MIN_VAL = 1537, MAX_VAL = 2560.\f[R]
.SS THRESHOLD PARAMETERS
.TP
.B INIT_VAL
(optional) \- the initial value of the threshold between two adjacent
Nth and (N+1)th tiers.
It must be greater than or equal to \f[I]MIN_VAL\f[R] and less than or
equal to \f[I]MAX_VAL\f[R].
.TP
.B MIN_VAL
(optional) \- the minimum value of the threshold.
.TP
.B MAX_VAL
(optional) \- the maximum value of the threshold.
.PP
\f[B]NOTE:\f[R] Because setting the above parameters is optional, they
will be set to default values in case they are not defined.
.SS DRAM FALLBACK POLICY
.PP
With the usage of both \f[I]DRAM\f[R] and \f[I]KMEM_DAX\f[R] tiers, if
there is not enough memory to satisfy the DRAM tier memory allocation
request, the allocation will fall back to PMEM memory.
.PP
With the usage of both DRAM and \f[I]FS_DAX\f[R] tiers, if there is not
enough memory to satisfy the \f[I]DRAM\f[R] tier memory allocation
request, the allocation will fail.
.PP
If there is not enough memory to satisfy the \f[I]FS_DAX\f[R] or
\f[I]KMEM_DAX\f[R] tier memory allocation request, the allocation will
fail.
.SS EXAMPLES
.PP
The following example will run ls with the memkind memory tiering
library.
Make sure that paths to both \f[B]libmemtier.so\f[R] and
\f[B]libmemkind.so\f[R] are included in \f[B]LD_LIBRARY_PATH\f[R].
During the application run, 20% of the allocated memory will come from
PMEM memory and 80% will come from DRAM (\f[I]FS_DAX:DRAM\f[R] ratio is
1:4):
.IP \[bu] 2
\f[C]LD_PRELOAD=libmemtier.so MEMKIND_MEM_TIERS=\[dq]KIND:FS_DAX,PATH:/mnt/pmem0,PMEM_SIZE_LIMIT:10G,RATIO:1;KIND:DRAM,RATIO:4;POLICY:STATIC_RATIO\[dq] /bin/ls \-l\f[R]
.PP
The example value of \f[B]MEMKIND_MEM_TIERS\f[R] environment variable
where all allocations will come from PMEM memory with filesystem created
with the path \f[I]/mnt/pmem0\f[R] (PMEM file size is limited only by
the specified filesystem):
.IP \[bu] 2
\f[C]LD_PRELOAD=libmemtier.so MEMKIND_MEM_TIERS=\[dq]KIND:FS_DAX,PATH:/mnt/pmem0,RATIO:1;POLICY:STATIC_RATIO\[dq]\f[R]
.PP
The example value of \f[B]MEMKIND_MEM_THRESHOLDS\f[R] environment
variable.
With \f[I]INIT_VAL=64\f[R], on the application start all allocations
lower than 64 bytes threshold will come from DRAM and equal to or
greater than this value will come from PMEM memory NUMA nodes.
The threshold value changes during the runtime in order to maintain the
ratio.
\f[I]MIN_VAL=1\f[R] and \f[I]MAX_VAL=10000\f[R] set the lower and upper
limits of the threshold value.
Note that the \f[I]DYNAMIC_THRESHOLD\f[R] policy has to be set in
\f[B]MEMKIND_MEM_TIERS\f[R] environment variable:
.IP \[bu] 2
\f[C]LD_PRELOAD=libmemtier.so MEMKIND_MEM_TIERS=\[dq]KIND:DRAM,RATIO:1;KIND:KMEM_DAX,RATIO:4;POLICY:DYNAMIC_THRESHOLD\[dq] MEMKIND_MEM_THRESHOLDS=\[dq]INIT_VAL:64,MIN_VAL:1,MAX_VAL:10000\[dq]\f[R]
.SS NOTES
.PP
\f[B]libmemtier\f[R] works for applications that do not statically link
a \f[B]malloc\f[R] implementation.
.SS COPYRIGHT
.PP
Copyright (C) 2021 \- 2022 Intel Corporation.
All rights reserved.
.SS SEE ALSO
.PP
\f[B]memkind\f[R](3), \f[B]malloc\f[R](3)
