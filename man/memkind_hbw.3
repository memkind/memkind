.\" Automatically generated by Pandoc 2.5
.\"
.TH "MEMKIND_HBW" "3" "2022-08-10" "MEMKIND_HBW ver. 1.14.0+dev6+gcd4375cb" "MEMKIND_HBW | MEMKIND Programmer's Manual"
.hy
.\" SPDX-License-Identifier: BSD-2-Clause
.\" Copyright 2022, Intel Corporation
.SH NAME
.PP
\f[B]memkind_hbw\f[R] \- high bandwidth memory memkind operations.
.PP
\f[B]Note:\f[R] This is EXPERIMENTAL API.
The functionality and the header file itself can be changed (including
non\-backward compatible changes) or removed.
.SH SYNOPSIS
.IP
.nf
\f[C]
int memkind_hbw_check_available(struct memkind *kind);
int memkind_hbw_hugetlb_check_available(struct memkind *kind);
int memkind_hbw_get_mbind_nodemask(struct memkind *kind, unsigned long *nodemask, unsigned long maxnode);
int memkind_hbw_get_preferred_mbind_nodemask(struct memkind *kind, unsigned long *nodemask, unsigned long maxnode);
int memkind_hbw_all_get_mbind_nodemask(struct memkind *kind, unsigned long *nodemask, unsigned long maxnode);
void memkind_hbw_init_once(void);
void memkind_hbw_hugetlb_init_once(void);
void memkind_hbw_all_hugetlb_init_once(void);
void memkind_hbw_preferred_init_once(void);
void memkind_hbw_preferred_hugetlb_init_once(void);
void memkind_hbw_interleave_init_once(void);
\f[R]
.fi
.SH DESCRIPTION
.PP
High bandwidth memory memkind operations.
.TP
.B \f[C]memkind_hbw_check_available()\f[R]
returns zero if library was able to detect heterogeneous NUMA node
bandwidths.
Returns \f[B]MEMKIND_ERROR_UNAVAILABLE\f[R] if the detection mechanism
failed.
Detection mechanism can be also overridden by the environment variable
\f[B]MEMKIND_HBW_NODES\f[R] as described in the \f[B]memkind\f[R](3) man
page.
.TP
.B \f[C]memkind_hbw_hugetlb_check_available()\f[R]
In addition to checking for high bandwidth memory as is done by
\f[C]memkind_hbw_check_available()\f[R], this also checks for 2MB huge
pages as is done by \f[C]memkind_hugetlb_check_available_2mb()\f[R].
.TP
.B \f[C]memkind_hbw_get_mbind_nodemask()\f[R]
sets the \f[I]nodemask\f[R] bit to one that corresponds to the high
bandwidth NUMA nodes that has the closest NUMA distance to the CPU of
the calling process.
All other bits up to \f[I]maxnode\f[R] are set to zero.
The \f[I]nodemask\f[R] can be used in conjunction with the
*\f[B]mbind\f[R](2) system call.
.PP
\f[B]Note:\f[R] The function will fail if two or more high bandwidth
memory \f[I]NUMA\f[R] nodes are in the same the closest \f[I]NUMA\f[R]
distance to the CPU of the calling process.
memkind_hbw_get_preferred_mbind_nodemask() sets the \f[I]nodemask\f[R]
bit to one that corresponds to the high bandwidth NUMA node that has the
closest \f[I]NUMA\f[R] distance to the CPU of the calling process.
All other bits up to \f[I]maxnode\f[R] are set to zero.
The \f[I]nodemask\f[R] can be used in conjunction with the
\f[B]mbind\f[R](2) system call.
.TP
.B \f[C]memkind_hbw_all_get_mbind_nodemask()\f[R]
sets the \f[I]nodemask\f[R] bits to one that correspond to the all high
bandwidth NUMA nodes in the system.
All other bits up to \f[I]maxnode\f[R] are set to zero.
The \f[I]nodemask\f[R] can be used in conjunction with the
\f[B]mbind\f[R](2) system call.
.TP
.B \f[C]memkind_hbw_init_once()\f[R]
This function initializes \f[B]MEMKIND_HBW\f[R] kind and it should not
be called more than once.
\f[B]Note:\f[R] \f[C]memkind_hbw_init_once()\f[R] may reserve some extra
memory.
.TP
.B \f[C]memkind_hbw_hugetlb_init_once()\f[R]
This function initializes \f[B]MEMKIND_HBW_HUGETLB\f[R] kind and it
should not be called more than once.
\f[B]Note:\f[R] \f[C]memkind_hbw_hugetlb_init_once()\f[R] may reserve
some extra memory.
.TP
.B \f[C]memkind_hbw_preferred_init_once()\f[R]
This function initializes \f[B]MEMKIND_HBW_PREFERRED\f[R] kind and it
should not be called more than once.
\f[B]Note:\f[R] \f[C]memkind_hbw_preferred_init_once()\f[R] may reserve
some extra memory.
.TP
.B \f[C]memkind_hbw_preferred_hugetlb_init_once()\f[R]
This function initializes \f[B]MEMKIND_HBW_PREFERRED_HUGETLB\f[R] kind
and it should not be called more than once.
\f[B]Note:\f[R] \f[C]memkind_hbw_preferred_hugetlb_init_once()\f[R] may
reserve some extra memory.
.TP
.B \f[C]memkind_hbw_all_hugetlb_init_once()\f[R]
This function initializes \f[B]MEMKIND_HBW_ALL_HUGETLB\f[R] kind and it
should not be called more than once.
\f[B]Note:\f[R] \f[C]memkind_hbw_all_hugetlb_init_once()\f[R] may
reserve some extra memory.
.TP
.B \f[C]memkind_hbw_interleave_init_once()\f[R]
This function initializes \f[B]MEMKIND_HBW_INTERLEAVE\f[R] kind and it
should not be called more than once.
\f[B]Note:\f[R] \[ga]memkind_hbw_interleave_init_once() may reserve some
extra memory.
.SS COPYRIGHT
.PP
Copyright (C) 2014 \- 2022 Intel Corporation.
All rights reserved.
.SS SEE ALSO
.PP
\f[B]memkind\f[R](3), \f[B]memkind_arena\f[R](3),
\f[B]memkind_default\f[R](3), \f[B]memkind_hugetlb\f[R](3),
\f[B]memkind_pmem\f[R](3), \f[B]jemalloc\f[R](3), \f[B]mbind\f[R](2),
\f[B]mmap\f[R](2)
