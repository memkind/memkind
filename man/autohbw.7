.\" Automatically generated by Pandoc 2.9.2.1
.\"
.TH "AUTOHBW" "7" "2022-10-27" "AUTOHBW | MEMKIND Programmer's Manual"
.hy
.\" SPDX-License-Identifier: BSD-2-Clause
.\" Copyright "2014-2022", Intel Corporation
.SH NAME
.PP
\f[B]libautohbw.so\f[R] - An interposer library for redirecting heap
allocations
.SH SYNOPSIS
.IP
.nf
\f[C]
LD_PRELOAD=libautohbw.so command {arguments ...}
\f[R]
.fi
.SH DESCRIPTION
.TP
\f[B]AutoHBW\f[R] library (\f[B]\f[CB]libautohbw.so\f[B]\f[R])
is an interposer library for redirecting heap allocations (malloc,
calloc, realloc, valloc, posix_memalign, memlign) to high-bandwidth
(\f[B]HBW\f[R]) memory.
Consequently, \f[B]AutoHBW\f[R] library can be used to automatically
allocate high-bandwidth memory without any modification to source code
of an application.
.PP
For instance, the following command-line runs existing binary
\f[I]/bin/ls\f[R] with \f[B]AutoHBW\f[R] library, automatically
redirecting heap allocations (larger than a given threshold) to
high-bandwidth memory.
.PD 0
.P
.PD
\f[C]LD_PRELOAD=libautohbw.so /bin/ls\f[R]
.SH ENVIRONMENT
.PP
The behavior of \f[B]AutoHBW\f[R] library is controlled by the following
environment variables.
.TP
\f[B]\f[CB]AUTO_HBW_SIZE=x:[y]\f[B]\f[R]
Indicates that any allocation larger than \f[I]x\f[R] and smaller than
\f[I]y\f[R] should be allocated in HBW memory.
\f[I]x\f[R] and \f[I]y\f[R] can be followed by a K, M, or G to indicate
the size in Kilo/Memga/Giga bytes (e.g., 4K, 3M, 2G).
.PP
\f[B]Examples:\f[R]
.TP
\f[B]\f[CB]AUTO_HBW_SIZE=4K\f[B]\f[R]
allocations larger than 4K allocated in \f[B]HBW\f[R]
.TP
\f[B]\f[CB]AUTO_HBW_SIZE=1M:5M\f[B]\f[R]
allocations between 1M and 5M allocated in \f[B]HBW\f[R]
.TP
\f[B]\f[CB]AUTO_HBW_LOG=level\f[B]\f[R]
Sets the value of logging (printing) level.
If \f[I]level\f[R] is:
.IP \[bu] 2
-1 no messages are printed
.IP \[bu] 2
0 no allocations messages are printed but INFO messages are printed
.IP \[bu] 2
1 a log message is printed for each allocation (Default)
.IP \[bu] 2
2 a log message is printed for each allocation with a backtrace.
Redirect this output and use autohbw_get_src_lines.pl to find source
lines for each allocation.
Your application must be compiled with -g to see source lines.
.PP
\f[B]Notes:\f[R]
.IP \[bu] 2
Logging adds extra overhead.
Therefore, for performance critical runs, logging level should be 0
.IP \[bu] 2
The amount of free memory printed with log messages is only approximate
\[en] e.g.\ pages that are not touched yet are excluded
.PP
\f[B]Examples:\f[R]
.PP
\f[C]AUTO_HBW_LOG=1\f[R]
.TP
\f[B]\f[CB]AUTO_HBW_MEM_TYPE=memory_type\f[B]\f[R]
Sets the type of memory type that should be automatically allocated.
By default, this type is \f[B]MEMKIND_HBW_PREFERRED\f[R], if
\f[B]MCDRAM\f[R] is found in your system; otherwise, the default is
\f[B]MEMKIND_DEFAULT\f[R].
The names of memory types are defined in \f[B]memkind\f[R](3) man page.
The \f[I]memory_type\f[R] has to be one of \f[B]MEMKIND_DEFAULT\f[R],
\f[B]MEMKIND_HUGETLB\f[R], \f[B]MEMKIND_INTERLEAVE\f[R],
\f[B]MEMKIND_HBW\f[R], \f[B]MEMKIND_HBW_PREFERRED\f[R],
\f[B]MEMKIND_HBW_HUGETLB\f[R],
\f[B]MEMKIND_HBW_PRE\[hy]FERRED_HUGETLB\f[R],
\f[B]MEMKIND_HBW_INTERLEAVE\f[R]
.PP
If you are requesting any huge TLB pages, please make sure that the
requested type is currently enabled in your OS.
.PP
\f[B]Examples:\f[R]
.TP
\f[B]\f[CB]AUTO_HBW_MEM_TYPE=MEMKIND_HBW_PREFERRED\f[B]\f[R]
(default, if MCDRAM present)
.TP
\f[B]\f[CB]AUTO_HBW_MEM_TYPE=MEMKIND_DEFAULT\f[B]\f[R]
(default, if MCDRAM absent)
.PP
\f[C]AUTO_HBW_MEM_TYPE=MEMKIND_HBW_HUGETLB\f[R]
.PP
\f[C]AUTO_HBW_MEM_TYPE=MEMKIND_HUGETLB\f[R]
.TP
\f[B]\f[CB]AUTO_HBW_DEBUG=0|1|2\f[B]\f[R]
Set the debug message printing level.
Default is 0.
This is mainly for development.
.SH NOTES
.PP
It is possible to temporarily disable/enable automatic HBW allocations
by calling \f[C]disableAutoHBW()\f[R] and \f[C]enableAutoHBW()\f[R] in
source code.
To call these routines, please include autohbw_api.h header file and
link with -lautohbw.
.PP
If high-bandwidth memory is not physically present in your system, the
environment variable \f[B]MEMKIND_HBW_NODES\f[R] must be set to indicate
the high-bandwidth node as indicated in \f[B]memkind\f[R](3).
.SH EXAMPLES
.PP
The following will run \f[I]/bin/ls\f[R] with \f[B]AutoHBW\f[R] library.
Make sure that paths to both \f[I]libautohbw.so\f[R] and
\f[I]libmemkind.so\f[R] are included in \f[B]LD_LIBRARY_PATH\f[R].
.IP \[bu] 2
\f[C]LD_PRELOAD=libautohbw.so /bin/ls -l\f[R]
.PP
To run with \f[B]MPI\f[R], a shell script must be created, with the
correct \f[B]LD_PRELOAD\f[R] command for each rank.
For example, if we put \f[C]LD_PRELOAD=libautohbw.so /bin/ls\f[R] in a
shell script named \f[I]autohbw_test.sh\f[R], it can be executed with 2
MPI ranks as:
.IP \[bu] 2
\f[C]mpirun -n 2 ./autohbw_test.sh\f[R]
.SH COPYRIGHT
.PP
Copyright (C) 2014 - 2022 Intel Corporation.
All rights reserved.
.SH SEE ALSO
.PP
\f[B]memkind\f[R](3), \f[B]malloc\f[R](3), \f[B]numactl\f[R](8)
