.\" Automatically generated by Pandoc 2.5
.\"
.TH "PMEMALLOCATOR" "3" "2022-08-10" "PMEMALLOCATOR ver. 1.14.0+dev6+gcd4375cb" "PMEMALLOCATOR | MEMKIND Programmer's Manual"
.hy
.\" SPDX-License-Identifier: BSD-2-Clause
.\" Copyright 2022, Intel Corporation
.SH NAME
.PP
\f[B]libmemkind::pmem::allocator\f[R] \- The C++ allocator compatible
with the C++ standard library allocator concepts.
.PP
\f[B]Note:\f[R] \f[I]pmem_allocator.h\f[R] functionality is considered
as a stable API (STANDARD API).
.SH SYNOPSIS
.IP
.nf
\f[C]
#include <pmem_allocator.h>

Link with \-lmemkind

libmemkind::pmem::allocator(const char *dir, size_t max_size);
libmemkind::pmem::allocator(const char &dir, size_t max_size, libmemkind::allocation_policy alloc_policy);
libmemkind::pmem::allocator(const std::string &dir, size_t max_size);
libmemkind::pmem::allocator(const std::string &dir, size_t max_size, libmemkind::allocation_policy alloc_policy);
template <typename U> libmemkind::pmem::allocator<T>::allocator(const libmemkind::pmem::allocator<U>&) noexcept;
template <typename U> libmemkind::pmem::allocator(const allocator<U>&& other) noexcept;
libmemkind::pmem::allocator<T>::\[ti]allocator();
T *libmemkind::pmem::allocator<T>::allocate(std::size_t n) const;
void libmemkind::pmem::allocator<T>::deallocate(T *p, std::size_t n) const;
template <class U, class... Args> void libmemkind::pmem::allocator<T>::construct(U *p, Args... args) const;
void libmemkind::pmem::allocator<T>::destroy(T *p) const;
\f[R]
.fi
.SH DESCRIPTION
.TP
.B \f[C]libmemkind::pmem::allocator<T>\f[R]
is intended to be used with STL containers to allocate persistent
memory.
Memory management is based on memkind_pmem (memkind library).
Refer to the \f[B]memkind_pmem\f[R](3) and the
\f[B]memkind\f[R] (/memkind/manpages/memkind.3.html)(3) man page for
more details.
.TP
.B \f[C]libmemkind::allocation_policy\f[R]
specifies allocator memory usage policy, which allows to tune up memory
utilization.
The available types of allocator usage policy:
.IP \[bu] 2
\f[B]\f[CB]libmemkind::allocation_policy::DEFAULT\f[B]\f[R]
.PD 0
.P
.PD
Default allocator memory usage policy.
.IP \[bu] 2
\f[B]\f[CB]libmemkind::allocation_policy::CONSERVATIVE\f[B]\f[R]
.PD 0
.P
.PD
Conservative allocator memory usage policy \- prioritize memory usage at
the cost of performance.
.PD 0
.P
.PD
All public member types and functions correspond to standard library
allocator concepts and definitions.
The current implementation supports the C++11 standard.
.RS 2
.IP \[bu] 2
Template arguments:
.RS 2
.IP \[bu] 2
\f[I]T\f[R] is an object type aliased by value_type.
.IP \[bu] 2
\f[I]U\f[R] is an object type.
.RE
.RE
.PP
\f[B]Note:\f[R]
.IP \[bu] 2
\f[B]\f[CB]T *libmemkind::pmem::allocator<T>::allocate(std::size_t n)\f[B]\f[R]
.PD 0
.P
.PD
allocates persistent memory using \f[C]memkind_malloc()\f[R].
Throw \f[I]std::bad_alloc\f[R] when \f[I]n = 0\f[R] or there is not
enough memory to satisfy the request.
.IP \[bu] 2
\f[B]\f[CB]libmemkind::pmem::allocator<T>::deallocate(T *p, std::size_t n)\f[B]\f[R]
.PD 0
.P
.PD
deallocates memory associated with pointer returned by
\f[C]allocate()\f[R] using \f[C]memkind_free()\f[R].
.SS COPYRIGHT
.PP
Copyright (C) 2018 \- 2022 Intel Corporation.
All rights reserved.
.SS SEE ALSO
.PP
\f[B]memkind_pmem\f[R](3), \f[B]memkind\f[R](3)
