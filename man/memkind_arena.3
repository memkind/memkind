.\" Automatically generated by Pandoc 2.5
.\"
.TH "MEMKIND_ARENA" "3" "2022-08-22" "MEMKIND_ARENA | MEMKIND Programmer's Manual"
.hy
.\" SPDX-License-Identifier: BSD-2-Clause
.\" Copyright "2014-2022", Intel Corporation
.SH NAME
.PP
\f[B]memkind_arena\f[R] \- jemalloc arena allocation memkind operations.
.PD 0
.P
.PD
\f[B]Note:\f[R] This is \f[B]EXPERIMENTAL API\f[R].
The functionality and the header file itself can be changed (including
non\-backward compatible changes) or removed.
.SH SYNOPSIS
.IP
.nf
\f[C]
int memkind_arena_create(struct memkind *kind, struct memkind_ops *ops, const char *name);
int memkind_arena_create_map(struct memkind *kind, extent_hooks_t *hooks);
int memkind_arena_destroy(struct memkind *kind);
void *memkind_arena_malloc(struct memkind *kind, size_t size);
void *memkind_arena_calloc(struct memkind *kind, size_t num, size_t size);
int memkind_arena_posix_memalign(struct memkind *kind, void **memptr, size_t alignment, size_t size);
void *memkind_arena_realloc(struct memkind *kind, void *ptr, size_t size);
void *memkind_arena_realloc_with_kind_detect(void *ptr, size_t size);
int memkind_thread_get_arena(struct memkind *kind, unsigned int *arena, size_t size);
int memkind_bijective_get_arena(struct memkind *kind, unsigned int *arena, size_t size);
struct memkind *get_kind_by_arena(unsigned arena_ind);
struct memkind *memkind_arena_detect_kind(void *ptr);
int memkind_arena_finalize(struct memkind *kind);
void memkind_arena_init(struct memkind *kind);
void memkind_arena_free(struct memkind *kind, void *ptr);
void memkind_arena_free_with_kind_detect(void *ptr);
int memkind_arena_update_memory_usage_policy(struct memkind *kind, memkind_mem_usage_policy policy);
int memkind_arena_set_max_bg_threads(size_t threads_limit);
int memkind_arena_set_bg_threads(bool state);
int memkind_arena_stats_print(void (*write_cb) (void *, const char *), void *cbopaque, memkind_stat_print_opt opts);
\f[R]
.fi
.SH DESCRIPTION
.PP
This header file is a collection of functions can be used to populate
the memkind operations structure for memory kinds that use jemalloc.
.TP
.B \f[C]memkind_arena_create()\f[R]
is an implementation of the memkind \[lq]create\[rq] operation for
memory kinds that use jemalloc.
This calls \f[C]memkind_default_create()\f[R] (see
\f[C]memkind_default(3)\f[R]) followed by
\f[C]memkind_arena_create_map()\f[R] described below.
.TP
.B \f[C]memkind_arena_create_map()\f[R]
creates the \f[I]arena_map\f[R] array for the memkind structure pointed
to by \f[I]kind\f[R] which can be indexed by the
\f[C]ops.get_arena()\f[R] function from the kind\[cq]s operations.
If get_arena points \f[C]memkind_thread_get_arena()\f[R] then there will
be four arenas created for each processor and if get_arena points to
\f[C]memkind_bijective_get_arena()\f[R] then just one arena is created.
.TP
.B \f[C]memkind_arena_destroy()\f[R]
is an implementation of the memkind \[lq]destroy\[rq] operation for
memory kinds that use jemalloc.
This releases all of the resources allocated by
\f[C]memkind_arena_create()\f[R].
.TP
.B \f[C]memkind_arena_malloc()\f[R]
is an implementation of the memkind \[lq]malloc\[rq] operation for
memory kinds that use jemalloc.
This allocates memory using the arenas created by
\f[C]memkind_arena_create()\f[R] through the jemalloc\[cq]s
\f[C]mallocx()\f[R] interface.
It uses the memkind \[lq]get_arena\[rq] operation to select the arena.
.TP
.B \f[C]memkind_arena_calloc()\f[R]
is an implementation of the memkind \[lq]calloc\[rq] operation for
memory kinds that use jemalloc.
This allocates memory using the arenas created by
\f[C]memkind_arena_create()\f[R] through the jemalloc\[cq]s
\f[C]mallocx()\f[R] interface.
It uses the memkind \[lq]get_arena\[rq] operation to select the arena.
.TP
.B \f[C]memkind_arena_posix_memalign()\f[R]
is an implementation of the memkind \[lq]posix_memalign\[rq] operation
for memory kinds that use jemalloc.
This allocates memory using the arenas created by memkind_arena_create()
through the jemalloc\[cq]s \f[C]mallocx()\f[R] interface.
It uses the memkind \[lq]get_arena\[rq] operation to select the arena.
The POSIX standard requires that \f[C]posix_memalign(3)\f[R] may not set
\f[I]errno\f[R] however the jemalloc\[cq]s \f[C]malocx()\f[R] routine
may.
In an attempt to abide by the standard \f[I]errno\f[R] is recorded
before calling jemalloc\[cq]s \f[C]mallocx()\f[R] and then reset after
the call.
.TP
.B \f[C]memkind_arena_realloc()\f[R]
is an implementation of the memkind \[lq]realloc\[rq] operation for
memory kinds that use jemalloc.
This allocates memory using the arenas created by
\f[C]memkind_arena_create()\f[R] through the jemalloc\[cq]s
\f[C]mallocx()\f[R] interface.
It uses the memkind \[lq]get_arena\[rq] operation to select the arena.
.TP
.B \f[C]memkind_arena_realloc_with_kind_detect()\f[R]
function will look up for kind associated to the allocated memory
referenced by \f[I]ptr\f[R] and call (depending on kind value)
\f[C]memkind_arena_realloc()\f[R] or
\f[C]memkind_default_realloc()\f[R].
.TP
.B \f[C]memkind_thread_get_arena()\f[R]
retrieves the \f[I]arena\f[R] index that is bound to to the calling
thread based on a hash of its thread ID.
The \f[I]arena\f[R] index can be used with the \f[B]MALLOCX_ARENA\f[R]
macro to set flags for jemalloc\[cq]s \f[C]mallocx()\f[R].
.TP
.B \f[C]memkind_bijective_arena_get_arena()\f[R]
retrieves the \f[I]arena\f[R] index to be used with the MALLOCX_ARENA
macro to set flags for jemalloc\[cq]s \f[C]mallocx()\f[R].
Use of this operation implies that only one arena is used for the
\f[I]kind\f[R].
.TP
.B \f[C]memkind_arena_free()\f[R]
is an implementation of the memkind \[lq]free\[rq] operation for memory
kinds that use jemalloc.
It causes the allocated memory referenced by \f[I]ptr\f[R], which must
have been returned by a previous call to
\f[C]memkind_arena_malloc()\f[R], \f[C]memkind_arena_calloc()\f[R] or
\f[C]memkind_arena_realloc()\f[R] to be made available for future
allocations.
It uses the memkind \[lq]get_arena\[rq] operation to select the arena.
.TP
.B \f[C]memkind_arena_free_with_kind_detect()\f[R]
function will look up for kind associated to the allocated memory
referenced by \f[I]ptr\f[R] and call \f[C]memkind_arena_free()\f[R].
.TP
.B \f[C]memkind_arena_detect_kind()\f[R]
returns pointer to memory kind structure associated with given allocated
memory referenced by \f[I]ptr\f[R].
.TP
.B \f[C]get_kind_by_arena()\f[R]
returns pointer to memory kind structure associated with given arena.
.TP
.B \f[C]memkind_arena_finalize()\f[R]
is an implementation of the memkind \[lq]finalize\[rq] operation for
memory kinds that use jemalloc.
This function releases all resources allocated by
\f[C]memkind_arena_create()\f[R] and it\[cq]s called when main()
finishes or after calling exit() function.
.TP
.B \f[C]memkind_arena_init()\f[R]
creates arena map with proper hooks per specified kind.
.TP
.B \f[C]memkind_arena_update_memory_usage_policy()\f[R]
function changes time, which determine how fast jemalloc returns unused
pages back to the operating system, in other words how fast it
deallocates file space.
.PP
\f[C]memkind_arena_set_max_bg_threads()\f[R] sets the maximum number of
internal background worker threads in jemalloc.
The \f[I]threads_limit\f[R] specify limit of background threads which
can be enabled (0 means no limit).
.PP
\f[C]memkind_arena_set_bg_threads()\f[R] enables/disables internal
background worker threads in jemalloc.
.TP
.B \f[C]memkind_arena_stats_print()\f[R]
prints summary statistics.
This function wraps jemalloc\[cq]s function
\f[C]je_malloc_stats_print()\f[R].
Uses \f[I]write_cb\f[R] function to print the output.
While providing custom writer function, use \f[C]syscall(2)\f[R] rather
than \f[C]write(2)\f[R] Pass \f[I]NULL\f[R] in order to use the default
write_cb function which prints the output to the stderr.
Use \f[I]cbopaque\f[R] parameter in order to pass some data to your
\f[I]write_cb\f[R] function.
Pass additional options using \f[I]opts\f[R].
For more details on \f[I]opts\f[R] see the MEMORY \f[B]STATISTICS PRINT
OPTIONS\f[R] section below.
Returns MEMKIND_ERROR_INVALID when failed to parse options string,
MEMKIND_SUCCESS on success.
.SH MEMORY STATISTICS PRINT OPTIONS
.PP
The available options for printing statistics:
.TP
.B MEMKIND_STAT_PRINT_ALL
Print all statistics.
.TP
.B MEMKIND_STAT_PRINT_JSON_FORMAT
Print statistics in JSON format.
.TP
.B MEMKIND_STAT_PRINT_OMIT_GENERAL
Omit general information that never changes during execution.
.TP
.B MEMKIND_STAT_PRINT_OMIT_MERGED_ARENA
Omit merged arena statistics.
.TP
.B MEMKIND_STAT_PRINT_OMIT_DESTROYED_MERGED_ARENA
Omit destroyed merged arena statistics.
.TP
.B MEMKIND_STAT_PRINT_OMIT_PER_ARENA
Omit per arena statistics.
.TP
.B MEMKIND_STAT_PRINT_OMIT_PER_SIZE_CLASS_BINS
Omit per size class statistics for bins.
.TP
.B MEMKIND_STAT_PRINT_OMIT_PER_SIZE_CLASS_LARGE
Omit per size class statistics for large objects.
.TP
.B MEMKIND_STAT_PRINT_OMIT_MUTEX
Omit all mutex statistics.
.TP
.B MEMKIND_STAT_PRINT_OMIT_EXTENT
Omit extent statistics.
.SH COPYRIGHT
.PP
Copyright (C) 2014 \- 2022 Intel Corporation.
All rights reserved.
.SH SEE ALSO
.PP
\f[B]memkind\f[R](3), \f[B]memkind_default\f[R](3),
\f[B]memkind_hbw\f[R](3), \f[B]memkind_hugetlb\f[R](3),
\f[B]memkind_pmem\f[R](3), \f[B]jemalloc\f[R](3), \f[B]mbind\f[R](2),
\f[B]mmap\f[R](2), \f[B]syscall\f[R](2), \f[B]write\f[R](2)
