.\" Automatically generated by Pandoc 2.9.2.1
.\"
.TH "FIXEDALLOCATOR" "3" "2022-11-02" "FIXEDALLOCATOR | MEMKIND Programmer's Manual"
.hy
.\" SPDX-License-Identifier: BSD-2-Clause
.\" Copyright "2021-2022", Intel Corporation
.SH NAME
.PP
\f[B]libmemkind::fixed::allocator\f[R] - The C++ allocator compatible
with the C++ standard library allocator concepts.
.PP
\f[B]Note:\f[R] \f[I]fixed_allocator.h\f[R] functionality is considered
as a stable API (STANDARD API).
.SH SYNOPSIS
.IP
.nf
\f[C]
#include <fixed_allocator.h>

Link with -lmemkind

libmemkind::fixed::allocator(void *addr, size_t size);
template <typename U> libmemkind::fixed::allocator<T>::allocator(const libmemkind::fixed::allocator<U>&) noexcept;
template <typename U> libmemkind::fixed::allocator<T>::allocator(allocator<U>&& other) noexcept;
libmemkind::fixed::allocator<T>::\[ti]allocator();
T *libmemkind::fixed::allocator<T>::allocate(std::size_t n) const;
void libmemkind::fixed::allocator<T>::deallocate(T *p, std::size_t n) const;
template <class U, class... Args> void libmemkind::fixed::allocator<T>::construct(U *p, Args... &&args) const;
void libmemkind::fixed::allocator<T>::destroy(T *p) const;
\f[R]
.fi
.SH DESCRIPTION
.TP
\f[B]\f[CB]libmemkind::fixed::allocator<T>\f[B]\f[R]
is intended to be used with STL containers to allocate memory on
specific area.
Memory management is handled by jemalloc on the supplied area.
Refer \f[B]memkind\f[R](3) man page for more details.
.PD 0
.P
.PD
All public member types and functions correspond to standard library
allocator concepts and definitions.
The current implementation supports the C++11 standard.
.IP \[bu] 2
Template arguments:
.RS 2
.IP \[bu] 2
\f[I]T\f[R] is an object type aliased by value_type.
.IP \[bu] 2
\f[I]U\f[R] is an object type.
.RE
.PP
\f[B]Note:\f[R]
.IP \[bu] 2
\f[B]\f[CB]T *libmemkind::fixed::allocator<T>::allocate(std::size_t n)\f[B]\f[R]
.PD 0
.P
.PD
allocates memory using \f[B]memkind_malloc\f[R]() on the area supplied
to \f[C]libmemkind::fixed::allocator()\f[R].
Throw \f[I]std::bad_alloc\f[R] when \f[I]n = 0\f[R] or there is not
enough memory to satisfy the request.
.IP \[bu] 2
\f[B]\f[CB]libmemkind::fixed::allocator<T>::deallocate(T *p, std::size_t n)\f[B]\f[R]
.PD 0
.P
.PD
deallocates memory associated with a pointer returned by
\f[C]allocate()\f[R] using \f[C]memkind_free()\f[R].
.SH COPYRIGHT
.PP
Copyright (C) 2021 - 2022 Intel Corporation.
All rights reserved.
.SH SEE ALSO
.PP
\f[B]memkind\f[R](3)
